package hrs.services;

import hrs.entities.Employee;
import hrs.entities.HourlyEmployee;
import hrs.entities.SalariedEmployee;
import java.util.ArrayList;
import hrs.utils.Validation;
import java.util.Collections;

import java.util.Scanner;

public class EmployeeService {

    ArrayList<Employee> generalList = new ArrayList<>();

    public int searchEmployeeByID(String ID) {

        for (int i = 0; i < generalList.size(); i++) {
            if (generalList.get(i).getSsn().toUpperCase().matches(ID.toUpperCase())) {
                return i;
            }
        }
        return -1;
    }

    /*==============================FUNCTION #1===================================*/
    public void addEmployee() {
        String employeeID = "";
        String firstName = "";
        String lastName = "";
        String birthDate = "";
        String phone = "";
        String email;
        double wage = 0;
        double workingHours = 0;
        double commissionRate = 0;
        double grossSales = 0;
        double basicSalary = 0;
        int choice = 0;
        int pos;
        String[] options = {"Add new hourly employee", "Add new salaried employee"};
        MenuAndUserChoice menu = new MenuAndUserChoice(options);
        do {
            choice = menu.getUserChoice();
            switch (choice) {
                case 1:/* Add new Hourly Employee*/

                    do {
                        employeeID = Validation.readPattern("Enter ID of employee", Employee.ID_FORMAT);
                        pos = searchEmployeeByID(employeeID);
                        if (pos >= 0) {
                            System.out.println("The ID is duplicated!");
                        }
                    } while (pos >= 0 && employeeID.isEmpty());
                    do {
                        System.out.print("Enter the employee's first name: ");
                        Scanner sc = new Scanner(System.in);
                        firstName = sc.nextLine();
                        if (Validation.validName(firstName) == false) {
                            System.out.println("The name inputed is invalid!");
                        }
                        if (firstName.isEmpty()) {
                            System.out.println("the name can not be empty");
                        }

                    } while (firstName.isEmpty() && Validation.validName(firstName) == false);
                    do {
                        System.out.print("Enter the employee's last name: ");
                        Scanner sc = new Scanner(System.in);
                        lastName = sc.nextLine();
                        if (Validation.validName(lastName) == false) {
                            System.out.println("The name inputed is invalid!");
                        }
                    } while (lastName.isEmpty() && Validation.validName(lastName) == false);
                    do {
                        System.out.print("Enter the employee's birth date(dd/MM/yyyy): ");
                        Scanner sc = new Scanner(System.in);
                        birthDate = sc.nextLine();
                        if (Validation.isValidDate(birthDate) == false) {
                            System.out.println("the date inputed is invalid");
                        }
                    } while (Validation.isValidDate(birthDate) == false);
                    do {
                        try {

                            System.out.print("Enter the employee phone's number: ");
                            Scanner sc = new Scanner(System.in);
                            phone = sc.nextLine();
                            if (Validation.isValidPhone(phone) == false) {
                                System.out.println("The phone number must have atleast 7 digit!");
                            }
                        } catch (Exception e) {
                        
                        }
                    } while (Validation.isValidPhone(phone) == false);
                    do {
                        System.out.print("Enter the employee's email: ");
                        Scanner sc = new Scanner(System.in);
                        email = sc.nextLine();
                        if (Validation.isValidEmail(email) == false) {
                            System.out.println("The email is invalid");
                        }
                    } while (Validation.isValidEmail(email) == false);
                    do {
                        try {
                            System.out.print("Enter the employee's wage: ");
                            Scanner sc = new Scanner(System.in);
                            wage = sc.nextDouble();
                        } catch (Exception e) {
                            System.out.println("");
                        }
                    } while (wage <= 0);
                    do {
                        System.out.print("Enter the employee's working hours: ");
                        Scanner sc = new Scanner(System.in);
                        workingHours = sc.nextDouble();
                    } while (workingHours <= 0);
                    HourlyEmployee newHourlyEmployee = new HourlyEmployee(employeeID, firstName, lastName, birthDate, phone, email, wage, workingHours);
                    generalList.add(newHourlyEmployee);
                    break;
                case 2:
                    /* Add new Salaried Employee*/
                    do {
                        employeeID = Validation.readPattern("Enter ID of employee", Employee.ID_FORMAT);
                        pos = searchEmployeeByID(employeeID);
                        if (pos >= 0) {
                            System.out.println("The ID is duplicated!");
                        }
                    } while (pos >= 0 && employeeID.isEmpty());
                    do {
                        System.out.print("Enter the employee's first name: ");
                        Scanner sc = new Scanner(System.in);
                        firstName = sc.nextLine();
                        if (Validation.validName(firstName) == false) {
                            System.out.println("The name inputed is invalid!");
                        }

                    } while (firstName.isEmpty() && Validation.validName(firstName) == false);
                    do {
                        System.out.print("Enter the employee's last name: ");
                        Scanner sc = new Scanner(System.in);
                        lastName = sc.nextLine();
                        if (Validation.validName(lastName) == false) {
                            System.out.println("The name inputed is invalid!");
                        }
                    } while (lastName.isEmpty() && Validation.validName(lastName) == false);
                    do {
                        System.out.print("Enter the employee's birth date(dd/MM/yyyy): ");
                        Scanner sc = new Scanner(System.in);
                        birthDate = sc.nextLine();
                        if (Validation.isValidDate(birthDate) == false) {
                            System.out.println("The date inputed is invalid");
                        }
                    } while (Validation.isValidDate(birthDate) == false);
                    do {
                        try {
                            System.out.print("Enter the employee phone's number: ");
                            Scanner sc = new Scanner(System.in);
                            phone = sc.nextLine();
                            if (Validation.isValidPhone(phone) == false) {
                                System.out.println("The phone number must have atleast 7 digit!");
                            }
                        } catch (Exception e) {
                            System.out.println("the phone number must contain only digits");
                            
                        }
                    } while (Validation.isValidPhone(phone) == false);
                    do {
                        System.out.print("Enter the employee's email: ");
                        Scanner sc = new Scanner(System.in);
                        email = sc.nextLine();
                        if (Validation.isValidEmail(email) == false) {
                            System.out.println("The email is invalid");
                        }
                    } while (Validation.isValidEmail(email) == false);
                    do {
                        try {
                            System.out.print("Enter the employee's commission rate: ");
                            Scanner sc = new Scanner(System.in);
                            commissionRate = sc.nextDouble();
                        } catch (Exception e) {
                            System.out.println("");
                        }
                    } while (commissionRate <= 0);
                    do {
                        try {
                            System.out.print("Enter the employee's gross sales: ");
                            Scanner sc = new Scanner(System.in);
                            grossSales = sc.nextDouble();
                        } catch (Exception e) {
                            System.out.println("");
                        }
                    } while (grossSales <= 0);
                    do {
                        try {
                            System.out.print("Enter the employee's basic salary: ");
                            Scanner sc = new Scanner(System.in);
                            basicSalary = sc.nextDouble();
                        } catch (Exception e) {

                        }
                    } while (basicSalary <= 0);
                    SalariedEmployee newSalariedEmployee = new SalariedEmployee(employeeID, firstName, lastName, birthDate, phone, email, commissionRate, grossSales, basicSalary);
                    generalList.add(newSalariedEmployee);
                    break;
            }
        } while (choice > 0 && choice <= menu.size());
    }

    /*==============================FUNCTION #2===================================*/
    public void sortEmployeeByName() {
        Collections.sort(generalList, Employee.compName);
        displayEmployees();
    }

    public void sortEmployeebySSN() {
        Collections.sort(generalList, Employee.compSSN);
        displayEmployees();
    }

    public void displayEmployeesByOrder() {
        int choice = 0;

        String[] options = {"Display employees based on SSN", "Display employees based on name"};
        MenuAndUserChoice menu = new MenuAndUserChoice(options);
        do {
            choice = menu.getUserChoice();
            switch (choice) {
                case 1:
                    sortEmployeebySSN();
                    break;
                case 2:
                    sortEmployeeByName();
                    break;
                default:
                    System.out.println("Exited!");
            }
        } while (choice > 0 && choice <= menu.size());
    }

    public void displayEmployees() {
        if (generalList.isEmpty()) {
            System.out.println("There is no employee");
        } else {
            for (Employee x : generalList) {
                System.out.println("SSN = " + x.getSsn());
                System.out.println("first name = " + x.getFirstName());
                System.out.println("last name = " + x.getLastName());
                System.out.println("birth date = " + x.getBirthDate());
                System.out.println("phone = " + x.getPhone());
                System.out.println("email = " + x.getEmail());
                if (x instanceof HourlyEmployee) {
                    System.out.println("wage = " + ((HourlyEmployee) x).getWage());
                    System.out.println("workingHours = " + ((HourlyEmployee) x).getWorkingHours());
                } else if (x instanceof SalariedEmployee) {
                    System.out.println("Commission rate = " + ((SalariedEmployee) x).getCommissionRate());
                    System.out.println("gross sales = " + ((SalariedEmployee) x).getGrossSales());
                    System.out.println("basic salary = " + ((SalariedEmployee) x).getBasicSalary());
                }
            }
        }
    }

    /*==============================FUNCTION #3===================================*/
    public void ClassifyEmployees() {
        if (generalList.isEmpty()) {
            System.out.println("There is no employee");
        } else {
            for (int i = 0; i <= generalList.size(); i++) {
                for (Employee x : generalList) {
                    if (x instanceof HourlyEmployee) {
                        System.out.println("Hourly employee" + i);
                        displayEmployees();
                    } else if (x instanceof SalariedEmployee) {
                        System.out.println("Salaried employee" + i);
                        displayEmployees();
                    }
                }
            }
        }
    }

    public void updateEmployeeBySSN() {
        String employeeID = "";
        String newFirstName = "";
        String newLastName = "";
        String newBirthDate = "";
        String newPhone = "";
        String newEmail;
        double newWage = 0;
        double newWorkingHours = 0;
        double newCommissionRate = 0;
        double newGrossSales = 0;
        double newBasicSalary = 0;
        
        int pos;
        employeeID = Validation.readPattern("Enter ID of employee", Employee.ID_FORMAT);

        pos = searchEmployeeByID(employeeID);
        if (pos < 0) {
            System.out.println("There is no employee with such SSN!");
        } else {
            Employee emp = generalList.get(pos);

            do {
                System.out.print("Enter the employee's first name: ");
                Scanner sc = new Scanner(System.in);
                newFirstName = sc.nextLine();
                if (Validation.validName(newFirstName) == false) {
                    System.out.println("Special characters and number are not allowed!");
                }
                if (newFirstName.isEmpty()) {
                    System.out.println("");
                }
                if (!newFirstName.isEmpty() && Validation.validName(newFirstName) == true && newFirstName.equals(emp.getFirstName()) == false) {
                    emp.setFirstName(newFirstName);
                }
            } while (Validation.validName(newFirstName) == false && !newFirstName.isEmpty());
            do {
                System.out.print("Enter the employee's last name: ");
                Scanner sc = new Scanner(System.in);
                newFirstName = sc.nextLine();
                if (Validation.validName(newLastName) == false) {
                    System.out.println("Special characters and number are not allowed!");
                }
                if (newLastName.isEmpty()) {
                    System.out.println("");
                }
                if (!newLastName.isEmpty() && Validation.validName(newLastName) == true && newLastName.equals(emp.getLastName()) == false ) {
                    emp.setLastName(newLastName);
                }
            } while (Validation.validName(newLastName) == false && !newLastName.isEmpty());
            do {
                System.out.print("Enter the employee's birth date(dd/MM/yyyy): ");
                Scanner sc = new Scanner(System.in);
                newBirthDate = sc.nextLine();
                if (Validation.isValidDate(newBirthDate) == false) {
                    System.out.println("the date inputed is invalid");
                }
                if (newBirthDate.isEmpty()) {
                    System.out.println("");
                }
                if ( !newBirthDate.isEmpty() &&  Validation.isValidDate(newBirthDate) == true ){
                    emp.setBirthDate(newBirthDate);
                }
            } while (Validation.validName(newBirthDate) == false && !newBirthDate.isEmpty());
            do {
                try {
                    System.out.print("Enter the employee phone's number: ");
                    Scanner sc = new Scanner(System.in);
                    newPhone = sc.nextLine();
                    if (Validation.isValidPhone(newPhone) == false) {
                        System.out.println("The phone number must have atleast 7 digit!");
                    }
                } catch (Exception e) {
                   
                }
                if (newPhone.isEmpty()) {
                    System.out.println("");
                }
                if (!newPhone.isEmpty() && Validation.isValidPhone(newPhone) == true && newPhone != emp.getPhone()) {
                    emp.setPhone(newPhone);
                }
            } while (Validation.isValidPhone(newPhone) == false && !newPhone.isEmpty());
            do {
                System.out.print("Enter the employee's email: ");
                Scanner sc = new Scanner(System.in);
                newEmail = sc.nextLine();
                if (newEmail.isEmpty()) {
                    System.out.println("");
                }
                if (!newEmail.isEmpty() && Validation.isValidEmail(newEmail) == true && newEmail != emp.getEmail()) {
                    emp.setEmail(newEmail);
                    if (Validation.isValidEmail(newEmail) == false) {
                        System.out.println("The email is invalid");
                    }
                }
            } while (Validation.isValidEmail(newEmail) == false && !newEmail.isEmpty());
            if (emp instanceof HourlyEmployee) {
                do {
                    try {
                        System.out.print("Enter the employee's wage: ");
                        Scanner sc = new Scanner(System.in);
                        newWage = sc.nextDouble();
                        if (newWage != ((HourlyEmployee) emp).getWage()) {
                            ((HourlyEmployee) emp).setWage(newWage);
                        }
                    } catch (Exception e) {
                        System.out.println("");
                    }
                } while (newWage <= 0);
                do {
                    try {
                        System.out.print("Enter the employee's working hours: ");
                        Scanner sc = new Scanner(System.in);
                        newWorkingHours = sc.nextDouble();
                        if (newWage != ((HourlyEmployee) emp).getWorkingHours()) {
                            ((HourlyEmployee) emp).setWorkingHours(newWorkingHours);
                        }
                    } catch (Exception e) {
                        System.out.println("");
                    }
                } while (newWorkingHours <= 0);
                if (emp instanceof SalariedEmployee) {
                    do {
                        try {
                            System.out.print("Enter the employee's commission rate: ");
                            Scanner sc = new Scanner(System.in);
                            newCommissionRate = sc.nextDouble();
                            if (newCommissionRate != ((SalariedEmployee) emp).getCommissionRate()) {
                                ((SalariedEmployee) emp).setCommissionRate(newCommissionRate);
                            }
                        } catch (Exception e) {
                            System.out.println("");
                        }
                    } while (newCommissionRate <= 0);
                    do {
                        try {
                            System.out.print("Enter the employee's gross sales: ");
                            Scanner sc = new Scanner(System.in);
                            newGrossSales = sc.nextDouble();
                            if ( newGrossSales!= ((SalariedEmployee) emp).getGrossSales()) {
                                ((SalariedEmployee) emp).setGrossSales(newGrossSales);
                            }
                        } catch (Exception e) {
                            System.out.println("");
                        }
                    } while (newGrossSales <= 0);
                    do {
                        try {
                            System.out.print("Enter the employee's basic salary: ");
                            Scanner sc = new Scanner(System.in);
                            newBasicSalary = sc.nextDouble();
                            if ( newBasicSalary!= ((SalariedEmployee) emp).getBasicSalary()) {
                                ((SalariedEmployee) emp).setBasicSalary(newBasicSalary);
                            }
                        } catch (Exception e) {

                        }
                    } while (newBasicSalary <= 0);

                }
            }
        }
    }
}
